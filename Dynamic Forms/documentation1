________________________________________________________________________________________________________________

Implement redux-persist (whitelist & blacklist reducers)
________________________________________________________________________________________________________________

link: 

> whitelist
- the arguments you want to persist

> blacklist
- the arguments you don't want to persist

> Process
- npm install redux-persist
- make persist Reducer : to wrap app's root reducers and pass to persistStore

- persistStore : ensure your redux state is stored to persist storage
- persistor passed to the application

- userSlice : is a collection of Redux-related logic for a specific feature in your application. 
- It typically includes reducers and action creators.

- reducer: is a function that specifies how the application's state changes in response to actions 
- takes the current state and an action as arguments

- configureStore : provided by Redux Toolkit to create a Redux store.

________________________________________________________________________________________________________________

Formik
________________________________________________________________________________________________________________

link: https://medium.com/@louis.young0420/react-hook-form-vs-formik-a-friendly-comparison-d2fc0650f1e3

> form handling library in react
> provides built-in support for validation and error handling
> wrap a component in Formik component
> use Field and Error Message tags

- <Field> :  used in situations where you want Formik to manage the state of the form fields for you.
- <ErrorMessage> : used to display error messages related to form fields when validation fails. 

code reference: 

________________________________________________________________________________________________________________

Reak Hook Form
________________________________________________________________________________________________________________

link: https://react-hook-form.com

useForm() link : https://react-hook-form.com/docs/useform 

> npm install react-hook-form
> Register fields: register component into the hook -> make value available for form validation and submission.
> minimize unnecessary re-renders

> useForm() hook: custom hook that manages forms with ease. 
- mode: Validation strategy before submitting behaviour.
- reValidateMode: Validation strategy after submitting behaviour.
- defaultValues: Default values for the form.
- values: Reactive values to update the form values.
- errors: Reactive errors to update the form errors.
- resetOptions: Option to reset form state update while updating new form values.
- criteriaMode: Display all validation errors or one at a time.
- shouldFocusError: Enable or disable built-in focus management.
- delayError: Delay error from appearing instantly.
- shouldUseNativeValidation: Use browser built-in form constraint API.
- shouldUnregister: Enable and disable input unregister after unmount.

code reference: UseForm.jsx

________________________________________________________________________________________________________________

Difference between formik & react-hook-form
________________________________________________________________________________________________________________

link: https://medium.com/@louis.young0420/react-hook-form-vs-formik-a-friendly-comparison-d2fc0650f1e3

> React Hook Form 
- uses uncontrolled components and avoids re-rendering unnecessary parts 
- better for large forms
- relies on react hook -> handleSubmit , register , setValue
- straightforward syntac using register and errors
- is new since 2019
- better for forms with more fields

> formik
- uses controlled components, so additional re-renders when form state changes
- uses shouldUpdate to control the rendering
- high-level abstraction, complex and comprehensive set of features
- provides declarative approach as well as easy approach using errors
- older since 2016
- okay for small forms

code reference:

________________________________________________________________________________________________________________

Benchmark in terms of rendering
________________________________________________________________________________________________________________

- useForm() hook is prefered when more fields since it prevents unnecessary re-rendering. 

- For small to medium-sized projects with simple forms, React Hook Form might be a good fit due to its simplicity and performance. For larger and more complex forms, especially those with complex validation and submission logic, Formik might be a better choice.

- Formik better when using class , useForm() better when using function













